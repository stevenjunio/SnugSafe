// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id          String        @id @unique @default(uuid())
  authId      String        @unique
  userName    String?
  createdDate DateTime      @default(now())
  lastLogin   DateTime?     @default(now())
  userFiles   userFile[]
  userFolder  userFolder[]
  fileShare   fileShare[]
  userId      String?
  userKeys    userFileKey[]
  tags        tag[]
}

model userFile {
  id           String        @id @unique
  userId       String
  user         user          @relation(fields: [userId], references: [id])
  name         String
  size         Int
  type         String
  folderId     String?
  folder       userFolder?   @relation(fields: [folderId], references: [id])
  uploadDate   DateTime      @default(now())
  lastModified DateTime      @default(now()) @updatedAt
  fileShare    fileShare[]
  userKeys     userFileKey[]
  fileTags     fileTag[]
}

model fileUrl {
  id   String  @id @unique @default(uuid())
  url  String
  read Boolean @default(false)
}

model userFolder {
  id             String       @id @default(uuid())
  name           String
  parentFolderId String?
  parentFolder   userFolder?  @relation("ParentFolderRelation", fields: [parentFolderId], references: [id])
  childrenFolder userFolder[] @relation("ParentFolderRelation")
  userId         String
  user           user         @relation(fields: [userId], references: [authId])
  files          userFile[]
  createdAt      DateTime     @default(now())
}

model fileShare {
  id             String   @id @default(uuid())
  userFileID     String
  userFile       userFile @relation(fields: [userFileID], references: [id], onDelete: Cascade)
  sharedTo       user     @relation(fields: [userSharedToID], references: [id])
  userSharedToID String
}

model userFileKey {
  id         String   @id @unique @default(uuid())
  userFile   userFile @relation(fields: [userFileID], references: [id], onDelete: Cascade)
  userFileID String
  key        String
  user       user     @relation(fields: [userId], references: [id])
  userId     String
}

model tag {
  id        String    @id @default(uuid())
  name      String
  color     String?
  userId    String
  user      user      @relation(fields: [userId], references: [id])
  fileTags  fileTag[]
  createdAt DateTime  @default(now())

  @@unique([userId, name])
}

model fileTag {
  id     String   @id @default(uuid())
  fileId String
  tagId  String
  file   userFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
  tag    tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([fileId, tagId])
}
