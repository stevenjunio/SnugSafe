/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as HomeImport } from './routes/home'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as LayoutLoggedInImport } from './routes/_layout/_logged-in'
import { Route as LayoutLoggedInFilesImport } from './routes/_layout/_logged-in.files'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const LayoutLoggedInRoute = LayoutLoggedInImport.update({
  id: '/_layout/_logged-in',
  getParentRoute: () => rootRoute,
} as any)

const LayoutLoggedInFilesRoute = LayoutLoggedInFilesImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => LayoutLoggedInRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_logged-in': {
      id: '/_layout/_logged-in'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutLoggedInImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_logged-in/files': {
      id: '/_layout/_logged-in/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof LayoutLoggedInFilesImport
      parentRoute: typeof LayoutLoggedInImport
    }
  }
}

// Create and export the route tree

interface LayoutLoggedInRouteChildren {
  LayoutLoggedInFilesRoute: typeof LayoutLoggedInFilesRoute
}

const LayoutLoggedInRouteChildren: LayoutLoggedInRouteChildren = {
  LayoutLoggedInFilesRoute: LayoutLoggedInFilesRoute,
}

const LayoutLoggedInRouteWithChildren = LayoutLoggedInRoute._addFileChildren(
  LayoutLoggedInRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/home': typeof HomeRoute
  '/about': typeof AboutLazyRoute
  '': typeof LayoutLoggedInRouteWithChildren
  '/auth/signup': typeof AuthSignupRoute
  '/files': typeof LayoutLoggedInFilesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/home': typeof HomeRoute
  '/about': typeof AboutLazyRoute
  '': typeof LayoutLoggedInRouteWithChildren
  '/auth/signup': typeof AuthSignupRoute
  '/files': typeof LayoutLoggedInFilesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/home': typeof HomeRoute
  '/about': typeof AboutLazyRoute
  '/_layout/_logged-in': typeof LayoutLoggedInRouteWithChildren
  '/auth/signup': typeof AuthSignupRoute
  '/_layout/_logged-in/files': typeof LayoutLoggedInFilesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/home' | '/about' | '' | '/auth/signup' | '/files'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/about' | '' | '/auth/signup' | '/files'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/about'
    | '/_layout/_logged-in'
    | '/auth/signup'
    | '/_layout/_logged-in/files'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  HomeRoute: typeof HomeRoute
  AboutLazyRoute: typeof AboutLazyRoute
  LayoutLoggedInRoute: typeof LayoutLoggedInRouteWithChildren
  AuthSignupRoute: typeof AuthSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  HomeRoute: HomeRoute,
  AboutLazyRoute: AboutLazyRoute,
  LayoutLoggedInRoute: LayoutLoggedInRouteWithChildren,
  AuthSignupRoute: AuthSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home",
        "/about",
        "/_layout/_logged-in",
        "/auth/signup"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/_layout/_logged-in": {
      "filePath": "_layout/_logged-in.tsx",
      "children": [
        "/_layout/_logged-in/files"
      ]
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/_layout/_logged-in/files": {
      "filePath": "_layout/_logged-in.files.tsx",
      "parent": "/_layout/_logged-in"
    }
  }
}
ROUTE_MANIFEST_END */
